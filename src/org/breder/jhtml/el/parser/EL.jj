options{  JDK_VERSION = "1.5";  static = false;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;}PARSER_BEGIN(EL)package org.breder.jhtml.el.parser;import java.util.*;import org.breder.jhtml.el.node.*;public class EL{}PARSER_END(EL)SKIP :{  " "| "\r"| "\t"| "\n"| "\f"}SPECIAL_TOKEN :{  < SINGLE_LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >}MORE :{  < "/**" ~[ "/" ] >  {    input_stream.backup(1);  }  : IN_JAVA_DOC_COMMENT| < "/*" > : IN_MULTI_LINE_COMMENT}< IN_JAVA_DOC_COMMENT >SPECIAL_TOKEN :{  < JAVA_DOC_COMMENT : "*/" > : DEFAULT}< IN_MULTI_LINE_COMMENT >SPECIAL_TOKEN :{  < MULTI_LINE_COMMENT : "*/" > : DEFAULT}< IN_JAVA_DOC_COMMENT, IN_MULTI_LINE_COMMENT >MORE :{  < ~[ ] >}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < EQUAL : "=" >| < NOT : "!" >| < GREATER : ">" >| < LOWER : "<" >| < DOT : "." >| < COMMA : "," >| < LPARAM : "(" >| < RPARAM : ")" >| < LBLOCK : "{" >| < RBLOCK : "}" >}TOKEN :{  < STRING :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]        | [ "0"-"7" ] ([ "0"-"7" ])?        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]        )      )    )*    "\"" >| < CONSTANT :    (< ZDIGIT >)+    (      < DOT > (< ZDIGIT >)+    )? >| < BOOLEAN :    (      "true"    | "false"    ) >| < NATURAL : (< ZDIGIT >)+ >| < ID :    < LETTER >    (      < LETTER >    | < ZDIGIT >    | ":"    )* >| < #DIGIT : [ "1"-"9" ] >| < #ZDIGIT : [ "0"-"9" ] >| < #LETTER :    [ "a"-"z" ]  | [ "A"-"Z" ] >}List < ELNode > execute() :{  List < ELNode > nodes = new ArrayList < ELNode > ();  ELNode n = null;}{  (    n = exp()    {      nodes.add(n);    }  )*  < EOF >  {    return nodes;  }}ELNode exp() :{  ELNode r = null;}{  r = compare()  {    return r;  }}ELNode compare() :{  ELNode l = null;  ELNode r = null;}{  l = sum()  (    LOOKAHEAD((< EQUAL > < EQUAL >  | < NOT > < EQUAL >)  | < GREATER >  | < LOWER >)    (      < EQUAL > < EQUAL > r = sum()      {        l = new EqualNode(l, r);      }    | < NOT > < EQUAL > r = sum()      {        l = new NotEqualNode(l, r);      }    | LOOKAHEAD(< GREATER > < EQUAL >)      < GREATER > < EQUAL > r = sum()      {        l = new GreaterEqualNode(l, r);      }    | LOOKAHEAD(< LOWER > < EQUAL >)      < LOWER > < EQUAL > r = sum()      {        l = new LowerEqualNode(l, r);      }    | < GREATER > r = sum()      {        l = new GreaterNode(l, r);      }    | < LOWER > r = sum()      {        l = new LowerNode(l, r);      }    )  )*  {    return l;  }}ELNode sum() :{  ELNode l = null;  ELNode r = null;}{  l = term()  (    LOOKAHEAD(< PLUS >  | < MINUS >)    (      < PLUS > r = term()      {        l = new SumNode(l, r);      }    | < MINUS > r = term()      {        l = new SubNode(l, r);      }    )  )*  {    return l;  }}ELNode term() :{  ELNode l = null;  ELNode r = null;}{  l = unary()  (    LOOKAHEAD(< MULTIPLY >  | < DIVIDE >)    (      < MULTIPLY > r = unary()      {        l = new MulNode(l, r);      }    | < DIVIDE > r = unary()      {        l = new MulNode(l, r);      }    )  )*  {    return l;  }}ELNode unary() :{  ELNode r = null;}{  < MINUS > r = element()  {    return new NegNode(r);  }| < NOT > r = element()  {    return new NotNode(r);  }| r = element()  {    return r;  }}ELNode element() :{  Token t, tt;  ELNode r = null;}{  "(" r = exp() ")"  {    return r;  }| t = < STRING >  {    return new StringNode(t.image.substring(1, t.image.length() - 1));  }| t = < BOOLEAN >  {    return new BooleanNode(t.image);  }| t = < CONSTANT >  {    return new NumberNode(t.image);  }| LOOKAHEAD(< ID > < PLUS > < PLUS >)  t = < ID > < PLUS > < PLUS >  {    return new IncNode(new IdentifyNode(t.image));  }| LOOKAHEAD(< ID > < PLUS > < PLUS >)  t = < ID > < MINUS > < MINUS >  {    return new DecNode(new IdentifyNode(t.image));  }| r = cmd()  {    return r;  }}ELNode cmd() :{  Token t;  ELNode r;  CallNode c = null;  ELNode p = null;}{  t = < ID >  {    r = new IdentifyNode(t.image);  }  (    < DOT >    (      LOOKAHEAD(< ID > < LPARAM >)      t = < ID > < LPARAM >      {        r = c = new CallNode(r, t.image);      }      (        p = exp()        {          c.addParam(p);        }        (          (< COMMA >)? p = exp()          {            c.addParam(p);          }        )*      )?      < RPARAM >    | t = < ID >      {        r = new GetNode(r, t.image);      }    )  )*  {    return r;  }}
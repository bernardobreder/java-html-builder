/* Generated By:JavaCC: Do not edit this line. DTL.java */
package breder.dtl.el.parse;

import java.util.*;
import breder.dtl.el.node.*;
import breder.dtl.el.util.*;

public class DTL implements DTLConstants {

	final public List<Node> execute() throws ParseException {
		List<Node> nodes = new ArrayList<Node>();
		Node n = null;
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MINUS:
			case NOT:
			case LPARAM:
			case STRING:
			case CONSTANT:
			case BOOLEAN:
			case ID:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			n = exp();
			nodes.add(n);
		}
		{
			if (true)
				return nodes;
		}
		throw new Error("Missing return statement in function");
	}

	final public Node exp() throws ParseException {
		Node r = null;
		r = compare();
		{
			if (true)
				return r;
		}
		throw new Error("Missing return statement in function");
	}

	final public Node compare() throws ParseException {
		Token t = null;
		Token tt = null;
		Node l = null;
		Node r = null;
		l = sum();
		label_2: while (true) {
			if (jj_2_1(2147483647)) {
				;
			} else {
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case EQUAL:
				t = jj_consume_token(EQUAL);
				tt = jj_consume_token(EQUAL);
				r = sum();
				l = new EqualNode(TokenUtil.join(t, tt), l, r);
				break;
			case NOT:
				t = jj_consume_token(NOT);
				tt = jj_consume_token(EQUAL);
				r = sum();
				l = new EqualNode(TokenUtil.join(t, tt), l, r);
				break;
			default:
				jj_la1[1] = jj_gen;
				if (jj_2_2(2147483647)) {
					t = jj_consume_token(GREATER);
					tt = jj_consume_token(EQUAL);
					r = sum();
					l = new EqualNode(TokenUtil.join(t, tt), l, r);
				} else if (jj_2_3(2147483647)) {
					t = jj_consume_token(LOWER);
					tt = jj_consume_token(EQUAL);
					r = sum();
					l = new EqualNode(TokenUtil.join(t, tt), l, r);
				} else {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case GREATER:
						t = jj_consume_token(GREATER);
						r = sum();
						l = new EqualNode(t, l, r);
						break;
					case LOWER:
						t = jj_consume_token(LOWER);
						r = sum();
						l = new EqualNode(t, l, r);
						break;
					default:
						jj_la1[2] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
			}
		}
		{
			if (true)
				return l;
		}
		throw new Error("Missing return statement in function");
	}

	final public Node sum() throws ParseException {
		Token t = null;
		Node l = null;
		Node r = null;
		l = term();
		label_3: while (true) {
			if (jj_2_4(2147483647)) {
				;
			} else {
				break label_3;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
				t = jj_consume_token(PLUS);
				r = term();
				l = new SumNode(t, l, r);
				break;
			case MINUS:
				t = jj_consume_token(MINUS);
				r = term();
				l = new SubNode(t, l, r);
				break;
			default:
				jj_la1[3] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return l;
		}
		throw new Error("Missing return statement in function");
	}

	final public Node term() throws ParseException {
		Token t = null;
		Node l = null;
		Node r = null;
		l = unary();
		label_4: while (true) {
			if (jj_2_5(2147483647)) {
				;
			} else {
				break label_4;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MULTIPLY:
				t = jj_consume_token(MULTIPLY);
				r = unary();
				l = new MulNode(t, l, r);
				break;
			case DIVIDE:
				t = jj_consume_token(DIVIDE);
				r = unary();
				l = new MulNode(t, l, r);
				break;
			default:
				jj_la1[4] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return l;
		}
		throw new Error("Missing return statement in function");
	}

	final public Node unary() throws ParseException {
		Token t = null;
		Node r = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case MINUS:
			t = jj_consume_token(MINUS);
			r = element();
			{
				if (true)
					return new NegNode(t, r);
			}
			break;
		case NOT:
			t = jj_consume_token(NOT);
			r = element();
			{
				if (true)
					return new NotNode(t, r);
			}
			break;
		case LPARAM:
		case STRING:
		case CONSTANT:
		case BOOLEAN:
		case ID:
			r = element();
			{
				if (true)
					return r;
			}
			break;
		default:
			jj_la1[5] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Node element() throws ParseException {
		Token t = null;
		Token tt = null;
		Token ttt = null;
		Node r = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LPARAM:
			jj_consume_token(LPARAM);
			r = exp();
			jj_consume_token(RPARAM);
			{
				if (true)
					return r;
			}
			break;
		case STRING:
			t = jj_consume_token(STRING);
			{
				if (true)
					return new StringNode(t);
			}
			break;
		case BOOLEAN:
			t = jj_consume_token(BOOLEAN);
			{
				if (true)
					return new BooleanNode(t);
			}
			break;
		case CONSTANT:
			t = jj_consume_token(CONSTANT);
			{
				if (true)
					return new NumberNode(t);
			}
			break;
		default:
			jj_la1[6] = jj_gen;
			if (jj_2_6(2147483647)) {
				t = jj_consume_token(ID);
				jj_consume_token(PLUS);
				jj_consume_token(PLUS);
				{
					if (true)
						return new IncNode(t, new IdentifyNode(t));
				}
			} else if (jj_2_7(2147483647)) {
				t = jj_consume_token(ID);
				jj_consume_token(MINUS);
				jj_consume_token(MINUS);
				{
					if (true)
						return new DecNode(t, new IdentifyNode(t));
				}
			} else if (jj_2_8(2147483647)) {
				t = jj_consume_token(ID);
				tt = jj_consume_token(EQUAL);
				r = exp();
				{
					if (true)
						return new AssignNode(tt, new IdentifyNode(t), r);
				}
			} else if (jj_2_9(2147483647)) {
				t = jj_consume_token(ID);
				tt = jj_consume_token(ID);
				ttt = jj_consume_token(EQUAL);
				r = exp();
				{
					if (true)
						return new DefineNode(ttt, new IdentifyNode(t), new IdentifyNode(tt), r);
				}
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case ID:
					r = cmd();
					{
						if (true)
							return r;
					}
					break;
				default:
					jj_la1[7] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public TagNode cmd() throws ParseException {
		TagNode tag = null;
		TagNode ltag = null;
		TagNode rtag = null;
		Token t = null;
		Node p = null;
		Node c = null;
		t = jj_consume_token(ID);
		ltag = tag = new TagNode(t);
		if (jj_2_10(2147483647)) {
			jj_consume_token(LPARAM);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MINUS:
			case NOT:
			case LPARAM:
			case STRING:
			case CONSTANT:
			case BOOLEAN:
			case ID:
				p = exp();
				tag.addParam(p);
				label_5: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case MINUS:
					case NOT:
					case COMMA:
					case LPARAM:
					case STRING:
					case CONSTANT:
					case BOOLEAN:
					case ID:
						;
						break;
					default:
						jj_la1[8] = jj_gen;
						break label_5;
					}
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case COMMA:
						jj_consume_token(COMMA);
						break;
					default:
						jj_la1[9] = jj_gen;
						;
					}
					p = exp();
					tag.addParam(p);
				}
				break;
			default:
				jj_la1[10] = jj_gen;
				;
			}
			jj_consume_token(RPARAM);
		} else {
			;
		}
		label_6: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case DOT:
				;
				break;
			default:
				jj_la1[11] = jj_gen;
				break label_6;
			}
			jj_consume_token(DOT);
			t = jj_consume_token(ID);
			rtag = new TagNode(t);
			if (jj_2_11(2147483647)) {
				jj_consume_token(LPARAM);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case MINUS:
				case NOT:
				case LPARAM:
				case STRING:
				case CONSTANT:
				case BOOLEAN:
				case ID:
					p = exp();
					tag.addParam(p);
					label_7: while (true) {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case MINUS:
						case NOT:
						case COMMA:
						case LPARAM:
						case STRING:
						case CONSTANT:
						case BOOLEAN:
						case ID:
							;
							break;
						default:
							jj_la1[12] = jj_gen;
							break label_7;
						}
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case COMMA:
							jj_consume_token(COMMA);
							break;
						default:
							jj_la1[13] = jj_gen;
							;
						}
						p = exp();
						tag.addParam(p);
					}
					break;
				default:
					jj_la1[14] = jj_gen;
					;
				}
				jj_consume_token(RPARAM);
			} else {
				;
			}
			tag.addNode(rtag);
			tag = rtag;
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LBLOCK:
			jj_consume_token(LBLOCK);
			label_8: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case MINUS:
				case NOT:
				case LPARAM:
				case STRING:
				case CONSTANT:
				case BOOLEAN:
				case ID:
					;
					break;
				default:
					jj_la1[15] = jj_gen;
					break label_8;
				}
				c = exp();
				tag.addNode(c);
			}
			jj_consume_token(RBLOCK);
			break;
		default:
			jj_la1[16] = jj_gen;
			;
		}
		{
			if (true)
				return ltag;
		}
		throw new Error("Missing return statement in function");
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_3R_49() {
		if (jj_3R_10())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_50()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_18() {
		if (jj_scan_token(GREATER))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_scan_token(LPARAM))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_49())
			jj_scanpos = xsp;
		if (jj_scan_token(RPARAM))
			return true;
		return false;
	}

	private boolean jj_3R_17() {
		if (jj_scan_token(NOT))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3R_9() {
		if (jj_scan_token(EQUAL))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(16)) {
			jj_scanpos = xsp;
			if (jj_scan_token(17))
				return true;
		}
		return false;
	}

	private boolean jj_3_1() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_9()) {
			jj_scanpos = xsp;
			if (jj_scan_token(18)) {
				jj_scanpos = xsp;
				if (jj_scan_token(19))
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_28() {
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3R_16() {
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3R_27() {
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3R_43() {
		if (jj_scan_token(DOT))
			return true;
		if (jj_scan_token(ID))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_46())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_22() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_26()) {
			jj_scanpos = xsp;
			if (jj_3R_27()) {
				jj_scanpos = xsp;
				if (jj_3R_28())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_26() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3R_13() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_16()) {
			jj_scanpos = xsp;
			if (jj_3R_17()) {
				jj_scanpos = xsp;
				if (jj_3R_18()) {
					jj_scanpos = xsp;
					if (jj_3R_19()) {
						jj_scanpos = xsp;
						if (jj_3R_20()) {
							jj_scanpos = xsp;
							if (jj_3R_21())
								return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_48() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(21))
			jj_scanpos = xsp;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3_10() {
		if (jj_scan_token(LPARAM))
			return true;
		return false;
	}

	private boolean jj_3R_11() {
		if (jj_3R_12())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_13()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_45() {
		if (jj_3R_10())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_48()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_5() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(14)) {
			jj_scanpos = xsp;
			if (jj_scan_token(15))
				return true;
		}
		return false;
	}

	private boolean jj_3R_30() {
		if (jj_scan_token(DIVIDE))
			return true;
		if (jj_3R_22())
			return true;
		return false;
	}

	private boolean jj_3R_42() {
		if (jj_scan_token(LPARAM))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_45())
			jj_scanpos = xsp;
		if (jj_scan_token(RPARAM))
			return true;
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_scan_token(MULTIPLY))
			return true;
		if (jj_3R_22())
			return true;
		return false;
	}

	private boolean jj_3R_10() {
		if (jj_3R_11())
			return true;
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_scan_token(ID))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_42())
			jj_scanpos = xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_43()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_44())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_23() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_29()) {
			jj_scanpos = xsp;
			if (jj_3R_30())
				return true;
		}
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_3R_22())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_23()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_9() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		return false;
	}

	private boolean jj_3R_40() {
		if (jj_3R_41())
			return true;
		return false;
	}

	private boolean jj_3_8() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3_4() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(12)) {
			jj_scanpos = xsp;
			if (jj_scan_token(13))
				return true;
		}
		return false;
	}

	private boolean jj_3R_25() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_3R_14())
			return true;
		return false;
	}

	private boolean jj_3R_39() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3_7() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		return false;
	}

	private boolean jj_3R_24() {
		if (jj_scan_token(PLUS))
			return true;
		if (jj_3R_14())
			return true;
		return false;
	}

	private boolean jj_3R_38() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3_6() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		return false;
	}

	private boolean jj_3R_15() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_24()) {
			jj_scanpos = xsp;
			if (jj_3R_25())
				return true;
		}
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(MINUS))
			return true;
		if (jj_scan_token(MINUS))
			return true;
		return false;
	}

	private boolean jj_3R_12() {
		if (jj_3R_14())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_15()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_36() {
		if (jj_scan_token(ID))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		if (jj_scan_token(PLUS))
			return true;
		return false;
	}

	private boolean jj_3R_47() {
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_scan_token(CONSTANT))
			return true;
		return false;
	}

	private boolean jj_3R_44() {
		if (jj_scan_token(LBLOCK))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_47()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(RBLOCK))
			return true;
		return false;
	}

	private boolean jj_3R_34() {
		if (jj_scan_token(BOOLEAN))
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_scan_token(LOWER))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		return false;
	}

	private boolean jj_3R_21() {
		if (jj_scan_token(LOWER))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3R_33() {
		if (jj_scan_token(STRING))
			return true;
		return false;
	}

	private boolean jj_3_2() {
		if (jj_scan_token(GREATER))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		return false;
	}

	private boolean jj_3R_20() {
		if (jj_scan_token(GREATER))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	private boolean jj_3R_50() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(21))
			jj_scanpos = xsp;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3R_31() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_32()) {
			jj_scanpos = xsp;
			if (jj_3R_33()) {
				jj_scanpos = xsp;
				if (jj_3R_34()) {
					jj_scanpos = xsp;
					if (jj_3R_35()) {
						jj_scanpos = xsp;
						if (jj_3R_36()) {
							jj_scanpos = xsp;
							if (jj_3R_37()) {
								jj_scanpos = xsp;
								if (jj_3R_38()) {
									jj_scanpos = xsp;
									if (jj_3R_39()) {
										jj_scanpos = xsp;
										if (jj_3R_40())
											return true;
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_32() {
		if (jj_scan_token(LPARAM))
			return true;
		if (jj_3R_10())
			return true;
		if (jj_scan_token(RPARAM))
			return true;
		return false;
	}

	private boolean jj_3_11() {
		if (jj_scan_token(LPARAM))
			return true;
		return false;
	}

	private boolean jj_3R_19() {
		if (jj_scan_token(LOWER))
			return true;
		if (jj_scan_token(EQUAL))
			return true;
		if (jj_3R_12())
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public DTLTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[17];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x5c422000, 0x30000, 0xc0000, 0x3000, 0xc000, 0x5c422000, 0x1c400000, 0x40000000, 0x5c622000, 0x200000, 0x5c422000, 0x100000, 0x5c622000, 0x200000, 0x5c422000, 0x5c422000, 0x1000000, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[11];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public DTL(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public DTL(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new DTLTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public DTL(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new DTLTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public DTL(DTLTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(DTLTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 17; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[34];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 17; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 34; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 11; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}

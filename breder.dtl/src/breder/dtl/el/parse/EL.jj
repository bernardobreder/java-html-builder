options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(DTL)package breder.dtl.el.parse;import java.util.*;import breder.dtl.el.node.*;import breder.dtl.el.util.*;public class DTL{}PARSER_END(DTL)SKIP :{  " "| "\r"| "\t"| "\n"| "\f"}SPECIAL_TOKEN :{  < SINGLE_LINE_COMMENT :    "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? >}MORE :{  < "/**" ~[ "/" ] >  {    input_stream.backup(1);  }  : IN_JAVA_DOC_COMMENT| < "/*" > : IN_MULTI_LINE_COMMENT}< IN_JAVA_DOC_COMMENT >SPECIAL_TOKEN :{  < JAVA_DOC_COMMENT : "*/" > : DEFAULT}< IN_MULTI_LINE_COMMENT >SPECIAL_TOKEN :{  < MULTI_LINE_COMMENT : "*/" > : DEFAULT}< IN_JAVA_DOC_COMMENT, IN_MULTI_LINE_COMMENT >MORE :{  < ~[ ] >}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < EQUAL : "=" >| < NOT : "!" >| < GREATER : ">" >| < LOWER : "<" >| < DOT : "." >| < COMMA : "," >| < LPARAM : "(" >| < RPARAM : ")" >| < LBLOCK : "{" >| < RBLOCK : "}" >}TOKEN :{  < STRING :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]        | [ "0"-"7" ] ([ "0"-"7" ])?        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]        )      )    )*    "\"" >| < CONSTANT :    (< ZDIGIT >)+    (      < DOT > (< ZDIGIT >)+    )? >| < BOOLEAN :    (      "true"    | "false"    ) >| < NATURAL : (< ZDIGIT >)+ >| < ID :    < LETTER >    (      < LETTER >    | < ZDIGIT >    | ":"    )* >| < #DIGIT : [ "1"-"9" ] >| < #ZDIGIT : [ "0"-"9" ] >| < #LETTER :    [ "a"-"z" ]  | [ "A"-"Z" ] >}List < Node > execute() :{  List < Node > nodes = new ArrayList < Node > ();  Node n = null;}{  (    n = exp()    {      nodes.add(n);    }  )*  {    return nodes;  }}Node exp() :{  Node r = null;}{  r = compare()  {    return r;  }}Node compare() :{  Token t = null;  Token tt = null;  Node l = null;  Node r = null;}{  l = sum()  (    LOOKAHEAD((< EQUAL > (< EQUAL >  | < NOT >))  | < GREATER >  | < LOWER >)    (      t = < EQUAL > tt = < EQUAL > r = sum()      {        l = new EqualNode(TokenUtil.join(t, tt), l, r);      }    | t = < NOT > tt = < EQUAL > r = sum()      {        l = new EqualNode(TokenUtil.join(t, tt), l, r);      }    | LOOKAHEAD(< GREATER > < EQUAL >)      t = < GREATER > tt = < EQUAL > r = sum()      {        l = new EqualNode(TokenUtil.join(t, tt), l, r);      }    | LOOKAHEAD(< LOWER > < EQUAL >)      t = < LOWER > tt = < EQUAL > r = sum()      {        l = new EqualNode(TokenUtil.join(t, tt), l, r);      }    | t = < GREATER > r = sum()      {        l = new EqualNode(t, l, r);      }    | t = < LOWER > r = sum()      {        l = new EqualNode(t, l, r);      }    )  )*  {    return l;  }}Node sum() :{  Token t = null;  Node l = null;  Node r = null;}{  l = term()  (    LOOKAHEAD(< PLUS >  | < MINUS >)    (      t = < PLUS > r = term()      {        l = new SumNode(t, l, r);      }    | t = < MINUS > r = term()      {        l = new SubNode(t, l, r);      }    )  )*  {    return l;  }}Node term() :{  Token t = null;  Node l = null;  Node r = null;}{  l = unary()  (    LOOKAHEAD(< MULTIPLY >  | < DIVIDE >)    (      t = < MULTIPLY > r = unary()      {        l = new MulNode(t, l, r);      }    | t = < DIVIDE > r = unary()      {        l = new MulNode(t, l, r);      }    )  )*  {    return l;  }}Node unary() :{  Token t = null;  Node r = null;}{  t = < MINUS > r = element()  {    return new NegNode(t, r);  }| t = < NOT > r = element()  {    return new NotNode(t, r);  }| r = element()  {    return r;  }}Node element() :{  Token t = null;  Token tt = null;  Token ttt = null;  Node r = null;}{  "(" r = exp() ")"  {    return r;  }| t = < STRING >  {    return new StringNode(t);  }| t = < BOOLEAN >  {    return new BooleanNode(t);  }| t = < CONSTANT >  {    return new NumberNode(t);  }| LOOKAHEAD(< ID > < PLUS > < PLUS >)  t = < ID > < PLUS > < PLUS >  {    return new IncNode(t, new IdentifyNode(t));  }| LOOKAHEAD(< ID > < PLUS > < PLUS >)  t = < ID > < MINUS > < MINUS >  {    return new DecNode(t, new IdentifyNode(t));  }| LOOKAHEAD(< ID > < EQUAL > exp())  t = < ID > tt = < EQUAL > r = exp()  {    return new AssignNode(tt, new IdentifyNode(t), r);  }| LOOKAHEAD(< ID > < ID > < EQUAL >)  t = < ID > tt = < ID > ttt = < EQUAL > r = exp()  {    return new DefineNode(ttt, new IdentifyNode(t), new IdentifyNode(tt), r);  }| r = cmd()  {    return r;  }}TagNode cmd() :{  TagNode tag = null;  TagNode ltag = null;  TagNode rtag = null;  Token t = null;  Node p = null;  Node c = null;}{  t = < ID >  {    ltag = tag = new TagNode(t);  }  (    LOOKAHEAD(< LPARAM >)    < LPARAM >    (      p = exp()      {        tag.addParam(p);      }      (        (< COMMA >)? p = exp()        {          tag.addParam(p);        }      )*    )?    < RPARAM >  )?  (    < DOT > t = < ID >    {      rtag = new TagNode(t);    }    (      LOOKAHEAD(< LPARAM >)      < LPARAM >      (        p = exp()        {          tag.addParam(p);        }        (          (< COMMA >)? p = exp()          {            tag.addParam(p);          }        )*      )?      < RPARAM >    )?    {      tag.addNode(rtag);      tag = rtag;    }  )*  (    < LBLOCK >    (      c = exp()      {        tag.addNode(c);      }    )*    < RBLOCK >  )?  {    return ltag;  }}